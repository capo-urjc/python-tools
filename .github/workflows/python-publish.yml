# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up PDM
      uses: pdm-project/setup-pdm@v4
    
    # Install dependencies
    - name: Install dependencies
      run: |
         python -m pip install --upgrade pip
         python -m pip install build twine mkdocs mkdocs-material mkdocstrings pandoc
    #pdm install -G dev


    # Build MkDocs documentation
    - name: Build MkDocs documentation
      run: |
        mkdocs build
    # Convertir el HTML a Markdown (a README.md)
        pandoc site/index.html -f html -t markdown -o README.md

    # Compiling the Python package
    - name: Build package
      run: |
        python -m pip install --upgrade build twine
        python -m build

    # Ensure Twine is installed
    - name: Install Twine
      run: pdm add --dev twine

    # Publish package to TestPyPI using Twine
    # Here we use my credentials
    - name: Publish package to TestPyPI
      env:
        TWINE_USERNAME: "david.garcia"  # TestPyPI user
        TWINE_PASSWORD: "hrfvbwriguwrh12380"  # TestPyPI password
      run: |
        twine upload --repository-url https://test.pypi.org/legacy/ --verbose dist/* # Upload the files to TestPyPI