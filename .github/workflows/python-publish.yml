# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up PDM
      uses: pdm-project/setup-pdm@v4
    
    # Install dependencies globally Sphinx and MkDocs
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx m2r2 sphinx_rtd_theme mkdocs mkdocs-material myst-parser

    # Initialize documentation
    - name: sphinx-quickstart to initialize documentation
      run:  |
          if [ ! -d "docs/source" ]; then
            mkdir -p docs
            sphinx-quickstart docs --sep -p "MyProject" -a "Author" -v "0.1" -q --ext-autodoc --ext-viewcode --makefile
          fi

    # Add myst parser to configuration
    - name: Update conf.py for myst_parser
      run: echo "extensions.append('myst_parser')" >> docs/source/conf.py

    # Build Sphinx documentation
    - name: Build Sphinx documentation
      run: sphinx-build -b html docs/source docs/build/html

    # Convert Sphinx .rst to Markdown
    - name: Convert Sphinx to Markdown
      run: sphinx-build -b dirhtml docs/source docs/build/markdown

    # Create mkdocs.yml
    - name: Create mkdocs.yml
      run: |
        if [ ! -f "mkdocs.yml" ]; then
            echo "site_name: MyProject Documentation" > mkdocs.yml
            echo "nav:" >> mkdocs.yml
            echo "  - Home: index.md" >> mkdocs.yml
            echo "docs_dir: docs/build/markdown" >> mkdocs.yml
          fi

    # Build MkDocs documentation
    - name: Build MkDocs documentation
      run: mkdocs build

    # Compiling the Python package
    - name: Build package
      run: |
        python -m pip install --upgrade build twine
        python -m build

    # Ensure Twine is installed
    - name: Install Twine
      run: pdm add --dev twine

    # Publish package to TestPyPI using Twine
    # Here we use my credentials
    - name: Publish package to TestPyPI
      env:
        TWINE_USERNAME: "david.garcia"  # TestPyPI user
        TWINE_PASSWORD: "hrfvbwriguwrh12380"  # TestPyPI password
      run: |
        twine upload --repository-url https://test.pypi.org/legacy/ --verbose dist/* # Upload the files to TestPyPI